# Generated from Python.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,30,246,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,3,2,101,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,
        17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,
        22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,
        27,1,27,5,27,230,8,27,10,27,12,27,233,9,27,1,28,4,28,236,8,28,11,
        28,12,28,237,1,29,4,29,241,8,29,11,29,12,29,242,1,29,1,29,0,0,30,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,28,57,29,59,30,1,0,4,3,0,65,90,95,95,97,122,
        4,0,48,57,65,90,95,95,97,122,1,0,48,57,2,0,9,10,32,32,249,0,1,1,
        0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
        0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
        0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
        0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
        0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
        0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,1,61,1,0,0,
        0,3,69,1,0,0,0,5,100,1,0,0,0,7,102,1,0,0,0,9,110,1,0,0,0,11,117,
        1,0,0,0,13,124,1,0,0,0,15,136,1,0,0,0,17,141,1,0,0,0,19,151,1,0,
        0,0,21,162,1,0,0,0,23,173,1,0,0,0,25,185,1,0,0,0,27,193,1,0,0,0,
        29,195,1,0,0,0,31,197,1,0,0,0,33,199,1,0,0,0,35,201,1,0,0,0,37,204,
        1,0,0,0,39,207,1,0,0,0,41,209,1,0,0,0,43,211,1,0,0,0,45,213,1,0,
        0,0,47,216,1,0,0,0,49,219,1,0,0,0,51,222,1,0,0,0,53,225,1,0,0,0,
        55,227,1,0,0,0,57,235,1,0,0,0,59,240,1,0,0,0,61,62,5,60,0,0,62,63,
        5,84,0,0,63,64,5,65,0,0,64,65,5,66,0,0,65,66,5,62,0,0,66,67,1,0,
        0,0,67,68,6,0,0,0,68,2,1,0,0,0,69,70,5,60,0,0,70,71,5,86,0,0,71,
        72,5,65,0,0,72,73,5,82,0,0,73,74,5,95,0,0,74,75,5,68,0,0,75,76,5,
        69,0,0,76,77,5,67,0,0,77,78,5,76,0,0,78,79,5,65,0,0,79,80,5,82,0,
        0,80,81,5,65,0,0,81,82,5,84,0,0,82,83,5,73,0,0,83,84,5,79,0,0,84,
        85,5,78,0,0,85,86,5,62,0,0,86,4,1,0,0,0,87,88,5,60,0,0,88,89,5,73,
        0,0,89,90,5,78,0,0,90,91,5,84,0,0,91,101,5,62,0,0,92,93,5,60,0,0,
        93,94,5,83,0,0,94,95,5,84,0,0,95,96,5,82,0,0,96,97,5,73,0,0,97,98,
        5,78,0,0,98,99,5,71,0,0,99,101,5,62,0,0,100,87,1,0,0,0,100,92,1,
        0,0,0,101,6,1,0,0,0,102,103,5,60,0,0,103,104,5,80,0,0,104,105,5,
        82,0,0,105,106,5,73,0,0,106,107,5,78,0,0,107,108,5,84,0,0,108,109,
        5,62,0,0,109,8,1,0,0,0,110,111,5,60,0,0,111,112,5,83,0,0,112,113,
        5,67,0,0,113,114,5,65,0,0,114,115,5,78,0,0,115,116,5,62,0,0,116,
        10,1,0,0,0,117,118,5,60,0,0,118,119,5,70,0,0,119,120,5,85,0,0,120,
        121,5,78,0,0,121,122,5,67,0,0,122,123,5,62,0,0,123,12,1,0,0,0,124,
        125,5,60,0,0,125,126,5,66,0,0,126,127,5,65,0,0,127,128,5,83,0,0,
        128,129,5,69,0,0,129,130,5,95,0,0,130,131,5,70,0,0,131,132,5,85,
        0,0,132,133,5,78,0,0,133,134,5,67,0,0,134,135,5,62,0,0,135,14,1,
        0,0,0,136,137,5,60,0,0,137,138,5,73,0,0,138,139,5,70,0,0,139,140,
        5,62,0,0,140,16,1,0,0,0,141,142,5,60,0,0,142,143,5,73,0,0,143,144,
        5,70,0,0,144,145,5,95,0,0,145,146,5,84,0,0,146,147,5,82,0,0,147,
        148,5,85,0,0,148,149,5,69,0,0,149,150,5,62,0,0,150,18,1,0,0,0,151,
        152,5,60,0,0,152,153,5,47,0,0,153,154,5,73,0,0,154,155,5,70,0,0,
        155,156,5,95,0,0,156,157,5,84,0,0,157,158,5,82,0,0,158,159,5,85,
        0,0,159,160,5,69,0,0,160,161,5,62,0,0,161,20,1,0,0,0,162,163,5,60,
        0,0,163,164,5,73,0,0,164,165,5,70,0,0,165,166,5,95,0,0,166,167,5,
        70,0,0,167,168,5,65,0,0,168,169,5,76,0,0,169,170,5,83,0,0,170,171,
        5,69,0,0,171,172,5,62,0,0,172,22,1,0,0,0,173,174,5,60,0,0,174,175,
        5,47,0,0,175,176,5,73,0,0,176,177,5,70,0,0,177,178,5,95,0,0,178,
        179,5,70,0,0,179,180,5,65,0,0,180,181,5,76,0,0,181,182,5,83,0,0,
        182,183,5,69,0,0,183,184,5,62,0,0,184,24,1,0,0,0,185,186,5,60,0,
        0,186,187,5,69,0,0,187,188,5,78,0,0,188,189,5,68,0,0,189,190,5,62,
        0,0,190,191,1,0,0,0,191,192,6,12,0,0,192,26,1,0,0,0,193,194,5,43,
        0,0,194,28,1,0,0,0,195,196,5,45,0,0,196,30,1,0,0,0,197,198,5,42,
        0,0,198,32,1,0,0,0,199,200,5,47,0,0,200,34,1,0,0,0,201,202,5,38,
        0,0,202,203,5,38,0,0,203,36,1,0,0,0,204,205,5,124,0,0,205,206,5,
        124,0,0,206,38,1,0,0,0,207,208,5,33,0,0,208,40,1,0,0,0,209,210,5,
        62,0,0,210,42,1,0,0,0,211,212,5,60,0,0,212,44,1,0,0,0,213,214,5,
        62,0,0,214,215,5,61,0,0,215,46,1,0,0,0,216,217,5,60,0,0,217,218,
        5,61,0,0,218,48,1,0,0,0,219,220,5,61,0,0,220,221,5,61,0,0,221,50,
        1,0,0,0,222,223,5,33,0,0,223,224,5,61,0,0,224,52,1,0,0,0,225,226,
        5,61,0,0,226,54,1,0,0,0,227,231,7,0,0,0,228,230,7,1,0,0,229,228,
        1,0,0,0,230,233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,56,1,
        0,0,0,233,231,1,0,0,0,234,236,7,2,0,0,235,234,1,0,0,0,236,237,1,
        0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,58,1,0,0,0,239,241,7,3,
        0,0,240,239,1,0,0,0,241,242,1,0,0,0,242,240,1,0,0,0,242,243,1,0,
        0,0,243,244,1,0,0,0,244,245,6,29,0,0,245,60,1,0,0,0,5,0,100,231,
        237,242,1,6,0,0
    ]

class PythonLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    TAB = 1
    VARIABLE_DECLARATIONS = 2
    VARIABLE_TYPE = 3
    PRINT = 4
    SCAN = 5
    FUNCTION = 6
    MAIN_FUNCTION = 7
    IF = 8
    IF_TRUE_START = 9
    IF_TRUE_END = 10
    IF_FALSE_START = 11
    IF_FALSE_END = 12
    END_CODE = 13
    PLUS = 14
    MINUS = 15
    MULT = 16
    DIV = 17
    AND = 18
    OR = 19
    NOT = 20
    GT = 21
    LET = 22
    GEQ = 23
    LEQ = 24
    EQ = 25
    NEQ = 26
    ASSIGN = 27
    ID = 28
    NUMBER = 29
    WS = 30

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'<TAB>'", "'<VAR_DECLARATION>'", "'<PRINT>'", "'<SCAN>'", "'<FUNC>'", 
            "'<BASE_FUNC>'", "'<IF>'", "'<IF_TRUE>'", "'</IF_TRUE>'", "'<IF_FALSE>'", 
            "'</IF_FALSE>'", "'<END>'", "'+'", "'-'", "'*'", "'/'", "'&&'", 
            "'||'", "'!'", "'>'", "'<'", "'>='", "'<='", "'=='", "'!='", 
            "'='" ]

    symbolicNames = [ "<INVALID>",
            "TAB", "VARIABLE_DECLARATIONS", "VARIABLE_TYPE", "PRINT", "SCAN", 
            "FUNCTION", "MAIN_FUNCTION", "IF", "IF_TRUE_START", "IF_TRUE_END", 
            "IF_FALSE_START", "IF_FALSE_END", "END_CODE", "PLUS", "MINUS", 
            "MULT", "DIV", "AND", "OR", "NOT", "GT", "LET", "GEQ", "LEQ", 
            "EQ", "NEQ", "ASSIGN", "ID", "NUMBER", "WS" ]

    ruleNames = [ "TAB", "VARIABLE_DECLARATIONS", "VARIABLE_TYPE", "PRINT", 
                  "SCAN", "FUNCTION", "MAIN_FUNCTION", "IF", "IF_TRUE_START", 
                  "IF_TRUE_END", "IF_FALSE_START", "IF_FALSE_END", "END_CODE", 
                  "PLUS", "MINUS", "MULT", "DIV", "AND", "OR", "NOT", "GT", 
                  "LET", "GEQ", "LEQ", "EQ", "NEQ", "ASSIGN", "ID", "NUMBER", 
                  "WS" ]

    grammarFileName = "Python.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


